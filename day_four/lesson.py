# урок ( 4 )
# Структуры данных: Списки, срезы, кортежи

# СПИСОК - ( ARRAY )

# Пустой список
empty_list = []

# Список с элементами
list_with_elements = [1, 2, 3, 4, 5]

# Список с элементами разных типов
mixed_list = [1, 'apple', 3.14, True]

# Также рассмотрим CRUD:
# Create - Создание
# Read - Чтение (получение)
# Update - Обновление (редактирование)
# Delete - Удаление

# ( Доступ к элементам списка )
my_list_one = [1, 2, 3, 4, 5]

# Первый элемент (индекс 0)
print(my_list_one[0])  # Вывод: 1

# Последний элемент (индекс - 1)
print(my_list_one[-1])  # Вывод: 5

# Изменение элементов списка
my_list_two = [1, 2, 3, 4, 5]

# Изменение элемента по индексу
print('\nold my_list_two:', my_list_two)  # [1, 2, 3, 4, 5]
my_list_two[1] = 10  # Изменяем элемент в спике
print('new my_list_two:', my_list_two)  # [1, 10, 3, 4, 5]

# Добавление и удаление элементов
my_list_three = [1, 2, 3, 4, 5]

# Добавление элемента в конец массива
print('\nold my_list_three', my_list_three)
my_list_three.append(6)  # Добавление
print('new my_list_three', my_list_three)

# Вставка элемента по индексу
print('\nold my_list_three', my_list_three)

# Первый параметр это индекс куда мы хотим добавить
# наш элемент, второй аргумент это сам элемент
my_list_three.insert(1, 'apple')
print('new my_list_three', my_list_three)

# Удаление элемента по значению
print('\nold my_list_three', my_list_three)
my_list_three.remove('apple')
print('new my_list_three', my_list_three)

# Удаление элемента по индексу
print('\nold my_list_three', my_list_three)
del my_list_three[-1]
print('new my_list_three', my_list_three)

# Срезы ( Slices )
my_list_four = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print()
# Срез от индекса 2 до 5 (не включая 5)
print(my_list_four[2:5])  # Вывод: [3, 4, 5]

# Срез от начала до индекса 5 (не включая 5)
print(my_list_four[:5])  # Вывод: [1, 2, 3, 4, 5]

# Срез от индекса 5 до конца
print(my_list_four[5:])  # Вывод: [6, 7, 8, 9, 10]

# Срез с шагом 2
print(my_list_four[::2])  # Вывод: [1, 3, 5, 7, 9]

# Изменение элементов с помощью срезов
my_list_five = [1, 2, 3, 4, 5]
print('\nold my_list_five', my_list_five)  # Вывод: [1, 2, 3, 4, 5]
my_list_five[0:3] = ['a', 'b', 'c']
print('new my_list_five', my_list_five)  # Вывод: ['a', 'b', 'c', 4, 5]

# Кортежи ( Tuples )
# Кортежи похожи на списки, но они неизменяемы. Это значит,
# что после создания кортежа его элементы нельзя изменить.
# Кортежи используются, когда вам нужно хранить
# последовательность элементов, которая не должна изменяться.

# - Создание кортежей
empty_tuple = ()  # Пустой кортеж
normal_tuple = (1, 2, 3, 4, 5)  # Кортеж с элементами
mixed_tuple = (1, 'apple', 3.14, True, False)  # Кортеж разных типов
without_circles_tuple = 1, 2, 3, 4, 5

print('\nempty_tuple', empty_tuple)
print('normal_tuple', normal_tuple)
print('mixed_tuple', mixed_tuple)
print('without_circles_tuple', without_circles_tuple)

# Доступ к элементам кортежа
# Как и списки, элементы кортежа доступны по индексу.
my_tuple = (1, 2, 3, 4, 5)
print()
# Первый элемент (индекс 0)
print('my_tuple', my_tuple[0])  # Вывод: 1

# Последний элемент (индекс -1)
print('my_tuple', my_tuple[-1])  # Вывод: 5

# - Преимущества кортежей:

# (Неизменяемость):
# Кортежи защищены от изменений, что делает
# их полезными для хранения постоянных данных.

# (Быстродействие):
# Кортежи обычно обрабатываются быстрее,
# чем списки, из-за их неизменяемости.

# (Использование в качестве ключей словаря):
# Кортежи могут быть использованы в качестве
# ключей словаря, в отличие от списков.

# - Заключение
# Списки используются для хранения
# изменяемых последовательностей данных.

# Срезы позволяют работать с подмножествами
# элементов в последовательностях.

# Кортежи используются для хранения неизменяемых
# последовательностей данных.

# Эти структуры данных являются основными
# инструментами для работы с последовательностями
# в Python и широко используются для различных задач.
